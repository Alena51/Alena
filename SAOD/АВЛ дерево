using System;
using System.Linq;
using System.Collections.Generic;
public class Node
{
    public int key;
    public Node left;
    public Node right;
    public int height;
    public Node(int x)
    {
        height = 1;
        key = x;
    }
}
public class Avl
{
    public Node root;
    public Avl() { }

    public void Insert(int x)
    {
        root = insert(root, x);
    }

    private int height(Node p)
    {
        return p == null ? 0 : p.height;
    }

    private int getBalance(Node p)
    {
        return p == null ? 0 : height(p.left) - height(p.right);
    }
    private Node insert(Node p, int x)
    {
        if (p == null)
            return new Node(x);
        if (x < p.key)
            p.left = insert(p.left, x);
        else
            p.right = insert(p.right, x);

        p.height = 1 + Math.Max(height(p.left), height(p.right));

        int balance = getBalance(p);

        if (balance < -1 &&  x > p.right.key)
        {
            return lRot(p);
        }

        if (balance > 1 && x < p.left.key)
        {
            return rRot(p);
        }

        if (balance > 1 && x > p.left.key)
        {
            p.left = lRot(p.left);
            return rRot(p);
        }

        if (balance < -1 && x < p.right.key)
        {
            p.right = rRot(p.right);
            return lRot(p);
        }

        return p;
    }
    public void Print()
    {
        print(root, 0);
    }
    private void print(Node p, int shift)
    {
        if (p.left != null)
            print(p.left, shift + 1);
        for (int i = 0; i != shift; i++)
            Console.Write("  ");
        Console.WriteLine(p.key);
        if (p.right != null)
            print(p.right, shift + 1);
    }
    public void store(Node p, List<Node> nodes)
    {
        if (p == null)
            return;
        store(p.left, nodes);
        nodes.Add(p);
        store(p.right, nodes);
    }
    public Node buildtree(Node p)
    {
        var nodes = new List<Node>();
        store(p, nodes);
        return buildit(nodes, 0, nodes.Count - 1);
    }
    public Node buildit(List<Node> nodes, int start, int end)
    {
        if (start > end)
            return null;
        int mid = (start + end) / 2;
        Node p = nodes[mid];
        p.left = buildit(nodes, start, mid - 1);
        p.right = buildit(nodes, mid + 1, end);
        return p;
    }

    public Node RotateLeft(Node rt)
    {
        var piv = rt.right;
        rt.right = piv.left;
        piv.left = rt;
        return piv;
    }
    public Node RotateRight(Node rt)
    {
        var piv = rt.left;
        rt.left = piv.right;
        piv.right = rt;
        return piv;
    }

    public Node rRot (Node y)
    {
        var x = y.left;
        var T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = 1 + Math.Max(height(y.left), height(y.right));
        x.height = 1 + Math.Max(height(x.left), height(x.right));

        return x;
    }

    public Node lRot(Node x)
    {
        var y = x.right;
        var T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = 1 + Math.Max(height(x.right), height(x.left));
        y.height = 1 + Math.Max(height(y.right), height(y.left));

        return y;
    }

}

class Dictionary
{
    public static Dictionary<int, string> MyDic(int i)
    {
        Dictionary<int, string> dic = new Dictionary<int, string>(); // создаём словарь
        Console.WriteLine("\n Надо вводить числа \n"); // вводим элементы
        string s;
        for (int j = 0; j < i; j++)
        {
            Console.Write("Введите элемент: ", j);
            s = Console.ReadLine();
            dic.Add(j, s);
            Console.Clear();
        }
        return dic;
    }
}
class Program
{
    static void Main()
    {
        Console.Write("Сколько элементов добавляем? ");
        int i = int.Parse(Console.ReadLine());
        Dictionary<int, string> dic = Dictionary.MyDic(i);
        try
        {
            // Получить коллекцию ключей
            ICollection<int> keys = dic.Keys;

            Console.WriteLine("Количество элементов: ");

            foreach (int j in keys)
            {
                Console.WriteLine("ID -> {0}  Name -> {1}", j, dic[j]);

            }

            Console.WriteLine("Строим АВЛ дерево");

            var obj = new Avl();

            foreach (int k in keys)
            {

                int b = Convert.ToInt32(dic[k]);
                obj.Insert(b);

            }

            obj.Print();

            Console.WriteLine("Проверка вхождения: ");

            // проверка на вхождение(по индексу почему-то) и добавление элемента

            int a = int.Parse(Console.ReadLine());
            if (!dic.ContainsKey(a))
            {
                Console.WriteLine("Такого элемента нет");

                Console.Write("Введите элемент: ", a);

                dic.Add(i, a.ToString());

                Console.WriteLine("Значение будет добавлено", dic[i]);
            }
            else
            {
                Console.WriteLine("Такой элемент есть");
            }


        }
        catch (FormatException)
        {
            Console.WriteLine("Неверный ввод");
        }

        try
        {
            // Получить коллекцию ключей
            ICollection<int> keys = dic.Keys;

            foreach (int j in keys)
                Console.WriteLine("ID -> {0}  Name -> {1}", j, dic[j]);

            Console.WriteLine("Строим АВЛ дерево");

            var obj = new Avl();

            foreach (int k in keys)
            {

                int b = Convert.ToInt32(dic[k]);
                obj.Insert(b);

            }

            obj.Print();

            // Получаем доступ через индексатор.
            try
            {
                Console.WriteLine("Введите индекс и получите досуп");
                int c = int.Parse(Console.ReadLine());

                Console.WriteLine("ID -> {0}  Name -> {1}", c, dic[c]);
            }

            catch
            {
                Console.WriteLine("Нет такого индекса");
            }

            // Используем индексатор для изменения значения в ассоциированной с ключом.

            Console.WriteLine("Введите индекс значения, которое хотите изменить и на что хотите изменить");
            int g = int.Parse(Console.ReadLine()); // индекс
            int l = int.Parse(Console.ReadLine()); // значение на которое меняем 

            Console.WriteLine("ID -> {0}  Name -> {1}", g, l);

            dic[g] = l.ToString();

        }
        catch (FormatException)
        {
            Console.WriteLine("Неверный ввод");
        }

        Console.ReadLine();

        try
        {
            // Получить коллекцию ключей
            ICollection<int> keys = dic.Keys;

            foreach (int j in keys)
            {
                Console.WriteLine("ID -> {0}  Name -> {1}", j, dic[j]);
            }

            Console.WriteLine("Строим АВЛ дерево");

            var obj = new Avl();

            foreach (int k in keys)
            {

                int b = Convert.ToInt32(dic[k]);
                obj.Insert(b);

            }

            obj.Print();
        }

        catch (FormatException)
        {
            Console.WriteLine("Неверный ввод");
        }

        // удаление элемента по индексу 

        Console.WriteLine("Хотите удалить какой-то элемент?");
        int p = int.Parse(Console.ReadLine());
        dic.Remove(p);

        //if (!dic.ContainsKey(p))
        //{
        //    Console.WriteLine("Ключ \"l\" не найден.");
        //}

        try
        {
            // Получить коллекцию ключей
            ICollection<int> keys = dic.Keys;

            foreach (int j in keys)
            {
                Console.WriteLine("ID -> {0}  Name -> {1}", j, dic[j]);
            }

            Console.WriteLine("Строим АВЛ дерево");

            var obj = new Avl();

            foreach (int k in keys)
            {

                int b = Convert.ToInt32(dic[k]);
                obj.Insert(b);

            }

            obj.Print();
        }

        catch (FormatException)
        {
            Console.WriteLine("Неверный ввод");
        }
    }
}
